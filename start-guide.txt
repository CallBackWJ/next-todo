Next ToDo List (with typescript)

//기본 라이브러리 셋팅
mkdir next-todo
cd next-todo
yarn init -y
yarn add next react react-dom          
yarn add -D typescript @types/react @types/node

//package.json 에 script 추가
  "scripts": {
    "dev": "next",
    "build": "next build",
    "start": "next start"
  },

//첫페이지 생성 pages/index.tsx
import {NextPage} from "next";
const index:NextPage = () => {
  return <div>hello typescript</div>;
};
export default index;


//yarn dev  실행 (tsconfig.json 이 생성됨)


//스타일드 컴포넌트 설치
yarn add styled-components
yarn add @types/styled-components -D

// pages/_document.tsx 파일에 스타일드 컴포넌트 설정

import Document from "next/document";
import { ServerStyleSheet } from "styled-components";
export default class MyDocument extends Document {
  static async getInitialProps(ctx: any) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App: any) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });
      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }
}


// .babelrc 설정
{
  "presets": [
    "next/babel"
  ],
  "plugins": [
    [
      "styled-components",
      {
        "ssr": true
      }
    ]
  ]
}



//스타일드 컴포넌트 적용
import {NextPage} from "next";
import styled from 'styled-components';

const Container= styled.div`
font-style:italic;
`
const index:NextPage = () => {
  return <Container>hello typescript</Container>;
};
export default index;

//network 탭에 preview 에서 스타일 적용되었는지 확인

//글로벌 스타일 적용 styles/GlobalStyle.ts
import {createGlobalStyle} from "styled-components"

const GlobalStyle=createGlobalStyle`
body {
  margin:0;
}
`
export default GlobalStyle


//글로벌 스타일 적용 pages/_app.tsx 생성
import App, { AppContext, AppProps, AppInitialProps } from "next/app";
import GlobalStyle from "../styles/GlobalStyle";

const app = ({ Component, pageProps }: AppProps) => {
  return (
    <>
      <GlobalStyle />
      <Component {...pageProps} />
    </>
  );
};

export default app;

//글로벌 스타일 리셋을 위한 라이브러리 설치
yarn add styled-reset

//글로벌 스타일에 리셋 구문 추가
import { createGlobalStyle } from "styled-components";
import reset from "styled-reset";
const GlobalStyle = createGlobalStyle`
${reset}
* {
  box-sizing: border-box;
}
`;
export default GlobalStyle;

//정상적으로 리셋되었는지 확인 (pages/index.tsx)
import { NextPage } from "next";
import styled from "styled-components";

const Container = styled.div`
  padding: 20px;
`;
const index: NextPage = () => {
  return (
    <Container>
      <h1>hello typescript</h1>
      <h2>hello typescript</h2>
      <h3>hello typescript</h3>
      <p>hello typescript</p>
      <a>hello typescript</a>
      <span>hello typescript</span>
      <ul>
        <li>hello typescript</li>
      </ul>
    </Container>
  );
};
export default index;

/////////////////////폰트 적용 (_document.tsx)
import Document, {
  Html,
  Head,
  Main,
  NextScript,
  DocumentContext,
} from "next/document";
import { ServerStyleSheet } from "styled-components";
export default class MyDocument extends Document {
  static async getInitialProps(ctx: DocumentContext) {
    const sheet = new ServerStyleSheet();
    const originalRenderPage = ctx.renderPage;

    try {
      ctx.renderPage = () =>
        originalRenderPage({
          enhanceApp: (App) => (props) =>
            sheet.collectStyles(<App {...props} />),
        });
      const initialProps = await Document.getInitialProps(ctx);
      return {
        ...initialProps,
        styles: (
          <>
            {initialProps.styles}
            {sheet.getStyleElement()}
          </>
        ),
      };
    } finally {
      sheet.seal();
    }
  }

  render() {
    return (
      <Html>
        <Head>
          <link
            href="http://fonts.googleapis.com/css?family=Noto+Sans:400,700&display=swap"
            rel="stylesheet"
          />
          <link
            href="http://fonts.googleapis.com/css?family=Noto+Sans+KR:400,700&display=swap&subset=korean"
            rel="stylesheet"
          />
        </Head>
        <body>
          <Main />
          <NextScript />
        </body>
      </Html>
    );
  }
}

/// 글로벌 스타일에 폰트 패밀리 설정
import { createGlobalStyle } from "styled-components";
import reset from "styled-reset";
const GlobalStyle = createGlobalStyle`
${reset}
* {
  box-sizing: border-box;
}
body {
  font-family: Noto Sans, Noto Sans KR;
}
`;
export default GlobalStyle;










